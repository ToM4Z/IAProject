
%--------------FASE PRELIMINARE---------------

% adj dice se una cella è adiacente ad un'altra senza tenere conto delle palline
% PS si dovrebbe calcolare una volta sola e poi passarli come fatti 
adj(R, C, R1, C) :- cell(R, C, _), cell(R1, C, _), R1 = R+1.
adj(R, C, R, C1) :- cell(R, C, _), cell(R, C1, _), C1 = C+1.
adj(R, C, R1, C1) :- adj(R1, C1, R, C).

adjDiagP(R, C, R1, C1) :- cell(R, C, _), cell(R1, C1, _), R1=R+1, C1=C+1.
adjDiagS(R, C, R1, C1) :- cell(R, C, _), cell(R1, C1, _), R1=R+1, C1=C-1.

% con ball indico la cella in cui c'è una pallina
ball(R, C, V) :- cell(R, C, V), V<>0.

% con empty indico le celle vuote
empty(R, C) :- cell(R, C, 0).

% reachable dice se una cella VUOTA può raggiungere un'altra cella VUOTA
reachable(R, C, R1, C1) :- adj(R, C, R1, C1), empty(R, C), empty(R1, C1).
reachable(R, C, R1, C1) :- reachable(R, C, R2, C2), adj(R2, C2, R1, C1), empty(R1, C1). 

% free dice se di fianco una cella c'è uno spazio libero
free(R, C, n) :- cell(R, C, _), empty(R1, C), R1=R-1.
free(R, C, s) :- cell(R, C, _), empty(R1, C), R1=R+1.
free(R, C, e) :- cell(R, C, _), empty(R, C1), C1=C+1.
free(R, C, o) :- cell(R, C, _), empty(R, C1), C1=C-1.
free(R, C, ne) :- cell(R, C, _), empty(R1, C1), R1=R-1, C1=C+1.
free(R, C, no) :- cell(R, C, _), empty(R1, C1), R1=R-1, C1=C-1.
free(R, C, se) :- cell(R, C, _), empty(R1, C1), R1=R+1, C1=C+1.
free(R, C, so) :- cell(R, C, _), empty(R1, C1), R1=R+1, C1=C-1.

%-----------------TROVO LE FILE DA SOLO 2 PALLINE-----------------

dueOrizz(R, C1, C2, V) :- ball(R, C1, V), ball(R, C2, V), adj(R, C1, R, C2), C2>C1, 
	not faParteDiTre(R, C2), not faParteDiQuattro(R, C2).

dueVert(R1, R2, C, V) :- ball(R1, C, V), ball(R2, C, V), adj(R1, C, R2, C), R2>R1, 
	not faParteDiTre(R2, C), not faParteDiQuattro(R2, C).

dueDiagP(R1, C1, R2, C2, V) :- ball(R1, C1, V), ball(R2, C2, V), adjDiagP(R1, C1, R2, C2), 
	not faParteDiTre(R2, C2), not faParteDiQuattro(R2, C2).

dueDiagS(R1, C1, R2, C2, V) :- ball(R1, C1, V), ball(R2, C2, V), adjDiagS(R1, C1, R2, C2), 
	not faParteDiTre(R2, C2), not faParteDiQuattro(R2, C2).

filaDue(R, C1, R, C2, V) :- dueOrizz(R, C1, C2, V).
filaDue(R1, C, R2, C, V) :- dueVert(R1, R2, C, V).
filaDue(R1, C1, R2, C2, V) :- dueDiagP(R1, C1, R2, C2, V).
filaDue(R1, C1, R2, C2, V) :- dueDiagS(R1, C1, R2, C2, V).

faParteDiDue(R, C) :- filaDue(R, C, R2, C2, V).
faParteDiDue(R, C) :- filaDue(R1, C1, R, C, V).

numFilaDue(N) :- N=#count{R1, C1, R2, C2, V: filaDue(R1, C1, R2, C2, V)}.

%-----------------TROVO LE FILE DA SOLO 3 PALLINE-----------------

treOrizz(R, C1, C2, C3, V) :- ball(R, C1, V), ball(R, C2, V), ball(R, C3, V), adj(R, C1, R, C2), adj(R, C2, R, C3), 
	C3>C2, C2>C1, not faParteDiQuattro(R, C2).

treVert(R1, R2, R3, C, V) :- ball(R1, C, V), ball(R2, C, V), ball(R3, C, V), adj(R1, C, R2, C), adj(R2, C, R3, C),
	R3>R2, R2>R1, not faParteDiQuattro(R2, C).

treDiagP(R1, C1, R2, C2, R3, C3, V) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), adjDiagP(R1,C1,R2,C2), 
	adjDiagP(R2,C2,R3,C3), not faParteDiQuattro(R2, C2).

treDiagS(R1, C1, R2, C2, R3, C3, V) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), adjDiagS(R1,C1,R2,C2), 
	adjDiagS(R2,C2,R3,C3), not faParteDiQuattro(R2, C2).

filaTre(R, C1, R, C2, R, C3, V) :- treOrizz(R, C1, C2, C3, V).
filaTre(R1, C, R2, C, R3, C, V) :- treVert(R1, R2, R3, C, V).
filaTre(R1, C1, R2, C2, R3, C3, V) :- treDiagP(R1, C1, R2, C2, R3, C3, V).
filaTre(R1, C1, R2, C2, R3, C3, V) :- treDiagS(R1, C1, R2, C2, R3, C3, V).

faParteDiTre(R, C) :- filaTre(R, C, R2, C2, R3, C3, V).
faParteDiTre(R, C) :- filaTre(R1, C1, R, C, R3, C3, V).
faParteDiTre(R, C) :- filaTre(R1, C1, R2, C2, R, C, V).

numFilaTre(N) :- N=#count{R1, C1, R2, C2, R3, C3, V: filaTre(R1, C1, R2, C2, R3, C3, V)}.

%-----------------TROVO LE FILE DA SOLO 4 PALLINE-----------------

quattroOrizz(R, C1, C2, C3, C4, V) :- ball(R, C1, V), ball(R, C2, V), ball(R, C3, V), ball(R, C4, V), 
	adj(R, C1, R, C2), adj(R, C2, R, C3), adj(R, C3, R, C4), C4>C3, C3>C2, C2>C1.

quattroVert(R1, R2, R3, R4, C, V) :- ball(R1, C, V), ball(R2, C, V), ball(R3, C, V), ball(R4, C, V), 
	adj(R1, C, R2, C), adj(R2, C, R3, C), adj(R3, C, R4, C), R4>R3, R3>R2, R2>R1.

quattroDiagP(R1, C1, R2, C2, R3, C3, R4, C4, V) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), ball(R4, C4, V), 
	adjDiagP(R1,C1,R2,C2), adjDiagP(R2,C2,R3,C3), adjDiagP(R3,C3,R4,C4).

quattroDiagS(R1, C1, R2, C2, R3, C3, R4, C4, V) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), ball(R4, C4, V), 
	adjDiagS(R1,C1,R2,C2), adjDiagS(R2,C2,R3,C3), adjDiagS(R3,C3,R4,C4).

fileQuattro(R, C1, R, C2, R, C3, R, C4, V) :- quattroOrizz(R, C1, C2, C3, C4, V).
fileQuattro(R1, C, R2, C, R3, C, R4, C, V) :- quattroVert(R1, R2, R3, R4, C, V).
fileQuattro(R1, C1, R2, C2, R3, C3, R4, C4, V) :- quattroDiagP(R1, C1, R2, C2, R3, C3, R4, C4, V).
fileQuattro(R1, C1, R2, C2, R3, C3, R4, C4, V) :- quattroDiagS(R1, C1, R2, C2, R3, C3, R4, C4, V).

faParteDiQuattro(R, C) :- fileQuattro(R, C, R2, C2, R3, C3, R4, C4, V).
faParteDiQuattro(R, C) :- fileQuattro(R1, C1, R, C, R3, C3, R4, C4, V).
faParteDiQuattro(R, C) :- fileQuattro(R1, C1, R2, C2, R, C, R4, C4, V).
faParteDiQuattro(R, C) :- fileQuattro(R1, C1, R2, C2, R3, C3, R, C, V).

numFilaQuattro(N) :- N=#count{R1, C1, R2, C2, R3, C3, R4, C4, V: fileQuattro(R1, C1, R2, C2, R3, C3, R4, C4, V)}.
%-------------------GUESS------------------

%move(R, C, R1, C1, V) | notMove(R, C, R1, C1, V) :- cell(R, C, V), cell(R1, C1, 0), V<>0. 

%-------------------CONSTRAINTS-------------


%numFilaDue(N)?
numFilaTre(N)?
%numFilaQuattro(N)?




cell(0,0,0).
cell(1,0,0).
cell(2,0,3).
cell(3,0,2).
cell(4,0,0).
cell(5,0,4).
cell(6,0,0).
cell(7,0,4).
cell(8,0,2).
cell(0,1,0).
cell(1,1,3).
cell(2,1,2).
cell(3,1,0).
cell(4,1,0).
cell(5,1,0).
cell(6,1,0).
cell(7,1,0).
cell(8,1,0).
cell(0,2,0).
cell(1,2,0).
cell(2,2,2).
cell(3,2,0).
cell(4,2,0).
cell(5,2,0).
cell(6,2,0).
cell(7,2,0).
cell(8,2,4).
cell(0,3,0).
cell(1,3,0).
cell(2,3,3).
cell(3,3,1).
cell(4,3,0).
cell(5,3,0).
cell(6,3,0).
cell(7,3,4).
cell(8,3,3).
cell(0,4,0).
cell(1,4,0).
cell(2,4,3).
cell(3,4,0).
cell(4,4,0).
cell(5,4,0).
cell(6,4,0).
cell(7,4,0).
cell(8,4,0).
cell(0,5,2).
cell(1,5,0).
cell(2,5,3).
cell(3,5,4).
cell(4,5,4).
cell(5,5,2).
cell(6,5,0).
cell(7,5,1).
cell(8,5,2).
cell(0,6,0).
cell(1,6,3).
cell(2,6,0).
cell(3,6,0).
cell(4,6,0).
cell(5,6,4).
cell(6,6,0).
cell(7,6,0).
cell(8,6,0).
cell(0,7,0).
cell(1,7,0).
cell(2,7,2).
cell(3,7,0).
cell(4,7,0).
cell(5,7,0).
cell(6,7,0).
cell(7,7,0).
cell(8,7,0).
cell(0,8,0).
cell(1,8,0).
cell(2,8,0).
cell(3,8,0).
cell(4,8,0).
cell(5,8,0).
cell(6,8,1).
cell(7,8,0).
cell(8,8,4).