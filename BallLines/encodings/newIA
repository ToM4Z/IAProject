% adj dice se una cella è adiacente ad un'altra senza tenere conto delle palline
% adjHalfDir lo calcola solo per un verso
% adjAllDir è in tutte le direzioni e in tutti i versi
% PS si dovrebbe calcolare una volta sola e poi passarli come fatti 

adjHalfDir(R, C, R1, C, v) :- cell(R, C, _), cell(R1, C, _), R1 = R+1.
adjHalfDir(R, C, R, C1, o) :- cell(R, C, _), cell(R, C1, _), C1 = C+1.
adjHalfDir(R, C, R1, C1, dp) :- cell(R, C, _), cell(R1, C1, _), R1=R+1, C1=C+1.
adjHalfDir(R, C, R1, C1, ds) :- cell(R, C, _), cell(R1, C1, _), R1=R+1, C1=C-1.

adjAllDir(R, C, R1, C1, D) :- adjHalfDir(R, C, R1, C1, D).
adjAllDir(R, C, R1, C1, D) :- adjAllDir(R1, C1, R, C, D).

celleUguali(R, C, R, C) :- cell(R, C, _).

% con ball indico la cella in cui c'è una pallina
ball(R, C, V) :- cell(R, C, V), V<>0.

% con empty indico le celle vuote
empty(R, C) :- cell(R, C, 0).

% reachable dice se una cella VUOTA può raggiungere un'altra cella VUOTA (anche se stessa)
pathDir(v). pathDir(o).
reachable(R, C, R, C) :- empty(R, C).
reachable(R, C, R1, C1) :- adjAllDir(R, C, R1, C1, D), empty(R, C), empty(R1, C1), pathDir(D).
reachable(R, C, R1, C1) :- reachable(R, C, R2, C2), adjAllDir(R2, C2, R1, C1, D), empty(R1, C1), pathDir(D). 

% acceptable dice se una cella può andare bene per formare un fila
color(1..4).
starr(R,C) :- star(R,C,_).
acceptable(R, C, V) :- isFull(R,C,V).
acceptable(R, C, V) :- empty(R, C), not starr(R, C), color(V).

%------------TROVO LE FILE

filaQuattro(R1, C1, R2, C2, R3, C3, R4, C4, V, D) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), ball(R4, C4, V), 
	adjHalfDir(R1, C1, R2, C2, D), adjHalfDir(R2, C2, R3, C3, D), adjHalfDir(R3, C3, R4, C4, D).

filaTre(R1, C1, R2, C2, R3, C3, V, D) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), adjHalfDir(R1, C1, R2, C2, D), adjHalfDir(R2, C2, R3, C3, D), 
	not faParteDi(R2, C2, 4).

filaDue(R1, C1, R2, C2, V, D) :- ball(R1, C1, V), ball(R2, C2, V), adjHalfDir(R1, C1, R2, C2, D), not faParteDi(R2, C2, 3), not faParteDi(R2, C2, 4).

faParteDi(R, C, 4) :- filaQuattro(R, C, R2, C2, R3, C3, R4, C4, _, _).
faParteDi(R, C, 4) :- filaQuattro(R1, C1, R, C, R3, C3, R4, C4, _, _).
faParteDi(R, C, 4) :- filaQuattro(R1, C1, R2, C2, R, C, R4, C4, _, _).
faParteDi(R, C, 4) :- filaQuattro(R1, C1, R2, C2, R3, C3, R, C, _, _).
faParteDi(R, C, 3) :- filaTre(R, C, R2, C2, R3, C3, _, _).
faParteDi(R, C, 3) :- filaTre(R1, C1, R, C, R3, C3, _, _).
faParteDi(R, C, 3) :- filaTre(R1, C1, R2, C2, R, C, _, _).
faParteDi(R, C, 2) :- filaDue(R, C, R2, C2, _, _).
faParteDi(R, C, 2) :- filaDue(R1, C1, R, C, _, _).

needTo(R,C,V,3) :- filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R1,C1,R,C,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,3) :- filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R3,C3,R,C,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,3) :- needTo(R1,C1,V,3), filaTre(R2,C2,_,_,_,_,V,D), adjAllDir(R1,C1,R2,C2,D), adjAllDir(R,C,R1,C1,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,3) :- needTo(R1,C1,V,3), filaTre(_,_,_,_,R2,C2,V,D), adjAllDir(R1,C1,R2,C2,D), adjAllDir(R,C,R1,C1,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,4) :- filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R1,C1,R,C,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,4) :- filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R4,C4,R,C,D), not celleUguali(R3,C3,R,C).

faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(R, C, R1, C1, _, _, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(R, C, _, _, R1, C1, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(R, C, _, _, _, _, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(_, _, R, C, R1, C1, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(_, _, R, C, _, _, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(_, _, _, _, R, C, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaTre(R, C, R1, C1, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaTre(_, _, R, C, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaTre(R, C, _, _, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaDue(R, C, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- faParteStessaFila(R1, C1, R, C, D).

%--------------------------------------GUESS

move(R, C, R1, C1, V, D) | notMove(R, C, R1, C1, V, D) :- ball(R, C, V), isFull(R2, C2, V), not celleUguali(R,C,R2,C2), adjAllDir(R2,C2,R1,C1,D), empty(R1, C1), empty(RP,CP), adjAllDir(R,C,RP,CP,Dir), pathDir(Dir), reachable(RP,CP,R1,C1), not faParteStessaFila(R,C,R2,C2,D).

%------------------------------COSTRAINTS

% ho un solo move per AS
:- #count{R, C, R1, C1, V, D: move(R, C, R1, C1, V, D)}<>1.

% preferisco creare file più grandi possibili
:~ lineCreated(2). [9@2]
:~ lineCreated(3). [8@2]
:~ lineCreated(4). [7@2]
:~ lineCreated(5). [6@2]
:~ lineCreated(6). [5@2]
:~ lineCreated(7). [4@2]
:~ lineCreated(8). [3@2]
:~ lineCreated(9). [2@2]

isFull(R,C,V):-ball(R,C,V).
isFull(R,C,V):-star(R,C,V).
countingNewLine(R1,C1,V,D) :- move(R,C,R1,C1,V,D).
countingNewLine(R2,C2,V,D) :- countingNewLine(R1,C1,V,D), adjAllDir(R1,C1,R2,C2,D), isFull(R2,C2,V), move(R,C,_,_,_,_), not celleUguali(R,C,R2,C2).
lineCreated(X) :- X=#count{R,C,V,D: countingNewLine(R,C,V,D)}.

% pago se rompo una fila
%:~ move(R,C,_,_,_,_), faParteDi(R,C,F). [F@1]

% pago se rompo una fila per crearne un'altra dalla lunghezza = o <
:~ move(R,C,_,_,_,_), faParteDi(R,C,F), lineCreated(F1), F1>=F, X=F1-F. [X@1]

% pago se occupo la fila a qualcun'altro
:~ move(_,_,R,C,V,_), needTo(R,C,V1,F), V<>V1. [F@1]

% se una pallina mi blocca una fila vorrei spostarla
:~ filaDue(R1,C1,R2,C2,V,D), adjAllDir(R1,C1,R3,C3,D), V<>V1, notMove(R3,C3,_,_,V1,_). [10@1]
:~ filaDue(R1,C1,R2,C2,V,D), adjAllDir(R2,C2,R3,C3,D), V<>V1, notMove(R3,C3,_,_,V1,_). [10@1]
:~ filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R1,C1,R4,C4,D), V<>V1, notMove(R4,C4,_,_,V1,_). [12@1]
:~ filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R3,C3,R4,C4,D), V<>V1, notMove(R4,C4,_,_,V1,_). [12@1]
:~ filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R1,C1,R5,C5,D), V<>V1, notMove(R5,C5,_,_,V1,_). [14@1]
:~ filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R4,C4,R5,C5,D), V<>V1, notMove(R5,C5,_,_,V1,_). [14@1]

% controllo che ci siano 5 spazi
:- needSpace(X), X<5.

countingNeedSpace(R1,C1,V,D) :- move(R,C,R1,C1,V,D).
countingNeedSpace(R2,C2,V,D) :- countingNeedSpace(R1,C1,V,D), adjAllDir(R1,C1,R2,C2,D), acceptable(R2,C2,V).
needSpace(X) :- X=#count{R,C,V,D: countingNeedSpace(R,C,V,D)}.


giveMove(R, C, R1, C1, V, D) :- move(R, C, R1, C1, V, D).


cell(0,0,0).
cell(1,0,0).
cell(2,0,0).
cell(3,0,0).
cell(4,0,0).
cell(5,0,0).
cell(6,0,0).
cell(7,0,0).
cell(8,0,0).
star(0,1,3).
cell(0,1,0).
cell(1,1,0).
cell(2,1,2).
cell(3,1,0).
cell(4,1,0).
cell(5,1,0).
cell(6,1,0).
cell(7,1,1).
cell(8,1,0).
cell(0,2,0).
cell(1,2,3).
cell(2,2,2).
cell(3,2,0).
cell(4,2,0).
cell(5,2,0).
cell(6,2,0).
cell(7,2,0).
cell(8,2,0).
cell(0,3,0).
cell(1,3,0).
cell(2,3,2).
cell(3,3,0).
cell(4,3,0).
cell(5,3,1).
cell(6,3,0).
cell(7,3,0).
cell(8,3,0).
cell(0,4,0).
cell(1,4,0).
cell(2,4,0).
cell(3,4,0).
cell(4,4,0).
cell(5,4,0).
cell(6,4,0).
cell(7,4,0).
cell(8,4,0).
cell(0,5,0).
cell(1,5,0).
cell(2,5,0).
cell(3,5,0).
cell(4,5,0).
cell(5,5,0).
cell(6,5,0).
cell(7,5,0).
cell(8,5,0).
cell(0,6,0).
cell(1,6,0).
cell(2,6,0).
cell(3,6,0).
cell(4,6,0).
cell(5,6,0).
cell(6,6,0).
cell(7,6,0).
star(8,6,2).
cell(8,6,0).
cell(0,7,0).
cell(1,7,0).
cell(2,7,0).
cell(3,7,0).
cell(4,7,0).
star(5,7,4).
cell(5,7,0).
cell(6,7,3).
cell(7,7,0).
cell(8,7,0).
cell(0,8,0).
cell(1,8,0).
cell(2,8,0).
cell(3,8,0).
cell(4,8,0).
cell(5,8,0).
cell(6,8,0).
cell(7,8,4).
cell(8,8,0).