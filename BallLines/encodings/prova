

pathDir("v"). 
pathDir("o").

% acceptable dice se una cella può andare bene per formare un fila
color(1..4).
starr(R,C) :- star(R,C,_).
acceptable(R, C, V) :- isFull(R,C,V).
acceptable(R, C, V) :- empty(R, C), not starr(R, C), color(V).

%------------TROVO LE FILE

filaQuattro(R1, C1, R2, C2, R3, C3, R4, C4, V, D) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), ball(R4, C4, V), 
	adjHalfDir(R1, C1, R2, C2, D), adjHalfDir(R2, C2, R3, C3, D), adjHalfDir(R3, C3, R4, C4, D).

filaTre(R1, C1, R2, C2, R3, C3, V, D) :- ball(R1, C1, V), ball(R2, C2, V), ball(R3, C3, V), adjHalfDir(R1, C1, R2, C2, D), adjHalfDir(R2, C2, R3, C3, D), 
	not faParteDi(R2, C2, 4).

filaDue(R1, C1, R2, C2, V, D) :- ball(R1, C1, V), ball(R2, C2, V), adjHalfDir(R1, C1, R2, C2, D), not faParteDi(R2, C2, 3), not faParteDi(R2, C2, 4).

faParteDi(R, C, 4) :- filaQuattro(R, C, R2, C2, R3, C3, R4, C4, _, _).
faParteDi(R, C, 4) :- filaQuattro(R1, C1, R, C, R3, C3, R4, C4, _, _).
faParteDi(R, C, 4) :- filaQuattro(R1, C1, R2, C2, R, C, R4, C4, _, _).
faParteDi(R, C, 4) :- filaQuattro(R1, C1, R2, C2, R3, C3, R, C, _, _).
faParteDi(R, C, 3) :- filaTre(R, C, R2, C2, R3, C3, _, _).
faParteDi(R, C, 3) :- filaTre(R1, C1, R, C, R3, C3, _, _).
faParteDi(R, C, 3) :- filaTre(R1, C1, R2, C2, R, C, _, _).
faParteDi(R, C, 2) :- filaDue(R, C, R2, C2, _, _).
faParteDi(R, C, 2) :- filaDue(R1, C1, R, C, _, _).

needTo(R,C,V,3) :- filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R1,C1,R,C,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,3) :- filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R3,C3,R,C,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,3) :- needTo(R1,C1,V,3), filaTre(R2,C2,_,_,_,_,V,D), adjAllDir(R1,C1,R2,C2,D), adjAllDir(R,C,R1,C1,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,3) :- needTo(R1,C1,V,3), filaTre(_,_,_,_,R2,C2,V,D), adjAllDir(R1,C1,R2,C2,D), adjAllDir(R,C,R1,C1,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,4) :- filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R1,C1,R,C,D), not celleUguali(R2,C2,R,C).
needTo(R,C,V,4) :- filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R4,C4,R,C,D), not celleUguali(R3,C3,R,C).

faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(R, C, R1, C1, _, _, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(R, C, _, _, R1, C1, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(R, C, _, _, _, _, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(_, _, R, C, R1, C1, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(_, _, R, C, _, _, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaQuattro(_, _, _, _, R, C, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaTre(R, C, R1, C1, _, _, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaTre(_, _, R, C, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaTre(R, C, _, _, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- filaDue(R, C, R1, C1, _, D).
faParteStessaFila(R, C, R1, C1, D) :- faParteStessaFila(R1, C1, R, C, D).

%--------------------------------------GUESS

move(R, C, R1, C1, V, D) | notMove(R, C, R1, C1, V, D) :- ball(R, C, V), isFull(R2, C2, V), not celleUguali(R,C,R2,C2), adjAllDir(R2,C2,R1,C1,D), empty(R1, C1), empty(RP,CP), adjAllDir(R,C,RP,CP,Dir), pathDir(Dir), not faParteStessaFila(R,C,R2,C2,D).

%------------------------------COSTRAINTS

% ho un solo move per AS
:- #count{R, C, R1, C1, V, D: move(R, C, R1, C1, V, D)}<>1.

% rechable dice se la pallina da spostare raggiunge la sua destinazione
reachable(R, C, R, C) :- move(RS,CS,_,_,_,_), pathDir(D), adjAllDir(RS,CS,R,C,D), empty(R, C).
reachable(R, C, R1, C1) :- move(RS,CS,_,_,_,_), pathDir(D), adjAllDir(RS,CS,R,C,D), empty(R, C), adjAllDir(R, C, R1, C1, D1), empty(R1, C1), pathDir(D1).
reachable(R, C, R1, C1) :- reachable(R, C, R2, C2), adjAllDir(R2, C2, R1, C1, D), empty(R1, C1), pathDir(D). 

% RSE = riga start empty 
:- move(RS,CS,RD,CD,_,_), adjAllDir(RS,CS,RSE,CSE,D), empty(RSE,CSE), pathDir(D), not reachable(RSE,CSE,RD,CD). 

% preferisco creare file più grandi possibili
:~ lineCreated(2). [9@2]
:~ lineCreated(3). [8@2]
:~ lineCreated(4). [7@2]
:~ lineCreated(5). [6@2]
:~ lineCreated(6). [5@2]
:~ lineCreated(7). [4@2]
:~ lineCreated(8). [3@2]
:~ lineCreated(9). [2@2]

isFull(R,C,V):-ball(R,C,V).
isFull(R,C,V):-star(R,C,V).
countingNewLine(R1,C1,V,D) :- move(R,C,R1,C1,V,D).
countingNewLine(R2,C2,V,D) :- countingNewLine(R1,C1,V,D), adjAllDir(R1,C1,R2,C2,D), isFull(R2,C2,V), move(R,C,_,_,_,_), not celleUguali(R,C,R2,C2).
lineCreated(X) :- X=#count{R,C,V,D: countingNewLine(R,C,V,D)}.

% pago se rompo una fila per crearne un'altra dalla lunghezza = o <
:~ move(R,C,_,_,_,_), faParteDi(R,C,F), lineCreated(F1), F1>=F, X=F1+10. [X@2]

% pago se occupo la fila a qualcun'altro
:~ move(_,_,R,C,V,_), needTo(R,C,V1,F), V<>V1. [F@1]

% se una pallina mi blocca una fila vorrei spostarla
:~ filaDue(R1,C1,R2,C2,V,D), adjAllDir(R1,C1,R3,C3,D), V<>V1, notMove(R3,C3,_,_,V1,_). [10@1]
:~ filaDue(R1,C1,R2,C2,V,D), adjAllDir(R2,C2,R3,C3,D), V<>V1, notMove(R3,C3,_,_,V1,_). [10@1]
:~ filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R1,C1,R4,C4,D), V<>V1, notMove(R4,C4,_,_,V1,_). [12@1]
:~ filaTre(R1,C1,R2,C2,R3,C3,V,D), adjAllDir(R3,C3,R4,C4,D), V<>V1, notMove(R4,C4,_,_,V1,_). [12@1]
:~ filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R1,C1,R5,C5,D), V<>V1, notMove(R5,C5,_,_,V1,_). [14@1]
:~ filaQuattro(R1,C1,R2,C2,R3,C3,R4,C4,V,D), adjAllDir(R4,C4,R5,C5,D), V<>V1, notMove(R5,C5,_,_,V1,_). [14@1]

% controllo che ci siano 5 spazi
:- needSpace(X), X<5.

countingNeedSpace(R1,C1,V,D) :- move(R,C,R1,C1,V,D).
countingNeedSpace(R2,C2,V,D) :- countingNeedSpace(R1,C1,V,D), adjAllDir(R1,C1,R2,C2,D), acceptable(R2,C2,V).
needSpace(X) :- X=#count{R,C,V,D: countingNeedSpace(R,C,V,D)}.



giveMove(R, C, R1, C1, V, D) :- move(R, C, R1, C1, V, D).
