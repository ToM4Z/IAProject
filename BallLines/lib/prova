% adj dice se una cella è adiacente ad un'altra senza tenere conto delle palline
% PS si dovrebbe calcolare una volta sola e poi passarli come fatti 
adj(R, C, R1, C, v) :- cell(R, C, _), cell(R1, C, _), R1 = R+1.
adj(R, C, R, C1, o) :- cell(R, C, _), cell(R, C1, _), C1 = C+1.
adj(R, C, R1, C1, D) :- adj(R1, C1, R, C, D).

adjDP(R,C,R1,C1) :- adjDP(R1,C1,R,C).
adjDP(R, C, R1, C1) :- cell(R, C, _), cell(R1, C1, _), R1=R+1, C1=C+1.
adjDS(R,C,R1,C1) :- adjDS(R1,C1,R,C).
adjDS(R, C, R1, C1) :- cell(R, C, _), cell(R1, C1, _), R1=R+1, C1=C-1.

adjAllDir(R, C, R1, C1, D) :- adj(R, C, R1, C1, D).
adjAllDir(R, C, R1, C1, dp) :- adjDP(R, C, R1, C1).
adjAllDir(R, C, R1, C1, ds) :- adjDS(R, C, R1, C1).

celleUguali(R, C, R, C) :- cell(R, C, _).

% con ball indico la cella in cui c'è una pallina
ball(R, C, V) :- cell(R, C, V), V<>0.

% con empty indico le celle vuote
empty(R, C) :- cell(R, C, 0).

% reachable dice se una cella VUOTA può raggiungere un'altra cella VUOTA (anche se stessa)
reachable(R, C, R, C) :- empty(R, C).
reachable(R, C, R1, C1) :- adj(R, C, R1, C1, _), empty(R, C), empty(R1, C1).
reachable(R, C, R1, C1) :- reachable(R, C, R2, C2), adj(R2, C2, R1, C1, _), empty(R1, C1). 

% acceptable dice se una cella può andare bene per formare un fila
color(1..4).
starr(R,C) :- star(R,C,_).
acceptable(R, C, V) :- isFull(R,C,V).
acceptable(R, C, V) :- empty(R, C), not starr(R, C), color(V).

%----------------GUESS

move(R, C, R1, C1, V, D) | notMove(R, C, R1, C1, V, D) :- ball(R, C, V), ball(R2, C2, V), not celleUguali(R,C,R2,C2), adjAllDir(R2,C2,R1,C1,D), empty(R1, C1), empty(RP,CP), adj(R,C,RP,CP,_), reachable(RP,CP,R1,C1).

% ho un solo move per AS
:- #count{R, C, R1, C1, V, D: move(R, C, R1, C1, V, D)}<>1.

% scelgo la posizione con cui creo una fila più lunga
%:~ lineCreated(X), Z=10-X . [Z@1] 

:~ lineCreated(2). [9@2]
:~ lineCreated(3). [8@2]
:~ lineCreated(4). [7@2]
:~ lineCreated(5). [6@2]
:~ lineCreated(6). [5@2]
:~ lineCreated(7). [4@2]
:~ lineCreated(8). [3@2]
:~ lineCreated(9). [2@2]


isFull(R,C,V):-ball(R,C,V).
isFull(R,C,V):-star(R,C,V).
countingNewLine(R1,C1,V,D) :- move(R,C,R1,C1,V,D).
countingNewLine(R2,C2,V,D) :- countingNewLine(R1,C1,V,D), adjAllDir(R1,C1,R2,C2,D), isFull(R2,C2,V).
lineCreated(X) :- X=#count{R,C,V,D: countingNewLine(R,C,V,D)}.

% controllo che ci siano 5 spazi

:- needSpace(X), X<5.

countingNeedSpace(R1,C1,V,D) :- move(R,C,R1,C1,V,D).
countingNeedSpace(R2,C2,V,D) :- countingNeedSpace(R1,C1,V,D), adjAllDir(R1,C1,R2,C2,D), acceptable(R2,C2,V).
needSpace(X) :- X=#count{R,C,V,D: countingNeedSpace(R,C,V,D)}.

cell(0,0,0).
cell(1,0,0).
cell(2,0,0).
cell(3,0,0).
cell(4,0,0).
cell(5,0,2).
cell(6,0,0).
cell(7,0,0).
cell(8,0,0).
cell(0,1,0).
cell(1,1,0).
cell(2,1,0).
cell(3,1,0).
cell(4,1,0).
cell(5,1,0).
cell(6,1,0).
cell(7,1,0).
cell(8,1,0).
star(0,2,3).
cell(0,2,0).
cell(1,2,0).
cell(2,2,0).
cell(3,2,0).
cell(4,2,0).
cell(5,2,0).
cell(6,2,0).
cell(7,2,0).
cell(8,2,0).
cell(0,3,0).
cell(1,3,0).
cell(2,3,2).
cell(3,3,0).
cell(4,3,0).
cell(5,3,0).
cell(6,3,0).
cell(7,3,0).
cell(8,3,0).
cell(0,4,0).
cell(1,4,0).
cell(2,4,0).
cell(3,4,0).
cell(4,4,0).
cell(5,4,0).
cell(6,4,0).
cell(7,4,0).
cell(8,4,0).
cell(0,5,0).
cell(1,5,0).
cell(2,5,0).
star(3,5,1).
cell(3,5,0).
cell(4,5,0).
cell(5,5,0).
cell(6,5,0).
cell(7,5,0).
cell(8,5,0).
cell(0,6,0).
cell(1,6,0).
cell(2,6,3).
cell(3,6,0).
cell(4,6,0).
cell(5,6,0).
cell(6,6,3).
cell(7,6,0).
cell(8,6,0).
cell(0,7,0).
cell(1,7,0).
cell(2,7,1).
cell(3,7,0).
cell(4,7,0).
cell(5,7,0).
cell(6,7,0).
cell(7,7,0).
cell(8,7,0).
cell(0,8,0).
cell(1,8,0).
cell(2,8,0).
cell(3,8,0).
cell(4,8,0).
cell(5,8,0).
cell(6,8,0).
cell(7,8,0).
star(8,8,4).
cell(8,8,0).